<?php

//define("XML_IMPORT_LINK","http://localhost/lotuspd.com_prep/xml/test.xml");
//define("ORIGINAL_IMAGE_FOLDER_LINK","http://localhost/lotuspd.com/sites/default/files/products/imported/");
//define("CLIENT_IMPORT_LINK","http://localhost/lotuspd.com_prep/xml/clients.xml");

define("XML_IMPORT_LINK","http://94.84.209.27/Lotus/Archivi/ARTI0099.XML");
define("ORIGINAL_IMAGE_FOLDER_LINK","http://94.84.209.27/Lotus/Immagini/");
define("CLIENT_IMPORT_LINK","http://94.84.209.27/Lotus/Archivi/CLIE0099.XML"); // UPDATE THIS LINK

function xml_import_menu(){
  $items = array();

  $items['import-xml-catalog'] = array(
    'title' => t('Import Xml'),
    'page callback' => 'xml_import_catalog',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

$items['import-xml-products'] = array(
    'title' => t('Import Xml products'),
    'page callback' => '_xml_step_one_images',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  
$items['delete-all-products-test'] = array(
    'title' => t('Delete all products'),
    'page callback' => 'xml_import_delete_all_products',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
$items['import-xml-users'] = array(
    'title' => t('Import users with xml'),
    'page callback' => 'xml_import_import_users',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

$items['update-xml-stock'] = array(
    'title' => t('Update product stock from xml'),
    'page callback' => 'xml_import_update_stock',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_uc_price_handler().
 */
function xml_import_uc_price_handler() {
  return array(
    'alter' => array(
      'title' => t('Discount price handler'),
      'description' => t('Adds discounts to product prices.'),
      'callback' => 'xml_import_price_handler_alter',
    ),
  );
}


function xml_import_import_users($name){
  
  $response = xml_import_get_xml_data(CLIENT_IMPORT_LINK);
 

	$output = "starting output <br/>";
	
	foreach($response['cliente'] as $val){
	  
	  $uq = db_fetch_object(db_query("SELECT uid, value FROM {profile_values} WHERE value = '%s'",$val["codice"]));

    if($uq){ // if the product exists load the node and modify it.
      $u = user_load($uq->uid);
      $output .= "loaded existig <br>";
      
    }else{
      
      $output .= "creating new <br>";
      $newUser = array(
        'name' => $val["utente"],
        //'name' => encodeUrlParam($val["ragione_sociale"]),
        'pass' => $val["password"], // note: do not md5 the password
        'mail' => $val["e_mail"],
        'status' => 1,
        'language' => "it",
        'init' => $val["e_mail"]
      );           
      $uo = user_save(null, $newUser);
      $u = user_load($uo->uid);
      
      $roles = user_roles();
      $u->roles = array(array_search('consumer_level_1', $roles) => 5);
      
      
    }
	  
    $u->name = $val["utente"];
    $u->pass = $val["password"];
  	$u->mail = $val["e_mail"];
  	$u->timezone = "7200";
  	$u->status = 1;
  	
  	
  	 $edit = array(
      'profile_discount_1'=> $val["sconto_1"],
      'profile_discount_2'=> $val["sconto_2"],
      'profile_discount_3'=> $val["sconto_3"]
      );
      
      $edit_cliente = array(
        'profile_codice'=> $val["codice"],
        'profile_name' => $val["ragione_sociale"],
        'profile_text_password' => $val["password"]
        );
        
      

      $ua = user_save((object) array('uid' => $u->uid), (array) $u);
      xml_import_save_profile($edit_cliente, $u, 'cliente');
      xml_import_save_profile($edit, $u, 'Discounts');
    

  }
  
  return $output;
 
}

function encodeUrlParam ( $string )
{
  $string = trim($string);
   
  if ( ctype_digit($string) )
  {
    return $string;
  }
  else
  {     
    // replace accented chars
    $accents = '/&([A-Za-z]{1,2})(grave|acute|circ|cedil|uml|lig);/';
    $string_encoded = htmlentities($string,ENT_NOQUOTES,'UTF-8');

    $string = preg_replace($accents,'$1',$string_encoded);
     
    // clean out the rest
    $replace = array('([\40])','([^a-zA-Z0-9-])','(-{2,})');
    $with = array('-','','-');
    $string = preg_replace($replace,$with,$string);
  }

  return strtolower($string);
}



function xml_import_save_profile($edit, $user, $category, $register = FALSE) {
  $result = _profile_get_fields($category, $register);
  while ($field = db_fetch_object($result)) {
    if (_profile_field_serialize($field->type)) {
       $edit[$field->name] = serialize($edit[$field->name]);
    }
    db_query("DELETE FROM {profile_values} WHERE fid = %d AND uid = %d", $field->fid, $user->uid);
    db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')", $field->fid, $user->uid, $edit[$field->name]);
    // Mark field as handled (prevents saving to user->data).
    $edit[$field->name] = NULL;
  }
}




function import_image_move($filename){
  
    $file_address = ORIGINAL_IMAGE_FOLDER_LINK.$filename.".jpg";
    //$ch = curl_init('http://localhost/lotuspd.com_prep/t/'.$filename.".jpg"); //Here is the file we are downloading
    $check_url = curl_init($file_address);
    curl_setopt($check_url, CURLOPT_TIMEOUT, 1);
    curl_setopt($check_url, CURLOPT_NOBODY, true);
    curl_exec($check_url);
    $retcode = curl_getinfo($check_url, CURLINFO_HTTP_CODE);
    curl_exec($check_url);
    curl_close($check_url);
    
    if($retcode == "200"){ 
     $ch = curl_init($file_address); //Here is the file we are downloading
     $fp = fopen (file_directory_path()."/products/imported/".$filename.".jpg", 'w');//This is the file where we save the information create it after we've confirmed its existance.
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);      
        curl_setopt($ch, CURLOPT_FILE, $fp);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_exec($ch);
        curl_close($ch);
        fclose($fp);
        return file_directory_path()."/products/imported/".$filename.".jpg";
    }else{
        return false;
    }
  
      
}

function drupal_add_existing_file($file_drupal_path,$uid=1,$status=FILE_STATUS_PERMANENT) {
  $file=(object)array(
    'filename' =>basename($file_drupal_path),
    'filepath' =>$file_drupal_path,
    'filemime' =>file_get_mimetype($file_drupal_path),
    'filesize' =>filesize($file_drupal_path),
    'uid'      =>$uid,
    'status'   =>$status,
    'timestamp'=>time()
  );
  
  // check to see if file exists in database
  $fnData = db_fetch_object(db_query("SELECT * FROM {files} WHERE filename = '%s' AND status = 1 ORDER BY timestamp DESC LIMIT 1",$file_drupal_path));
  
  if($fnData){
    drupal_write_record('files',$file,array('fid','uid','status','timestamp'));
  }else{
    drupal_write_record('files',$file);
  }

  return field_file_load($file_drupal_path);
}


function xml_import_get_xml_data($collect_url){
  
  $URL = $collect_url;
	$request = 'getInventory';
	$parameters = array("param1" => "value1", "param2" => "value2");
	
	$response = simpleXMLToArray(pullXML($URL,$request,$parameters));
  
  return $response;
}

function xml_import_product_load($model) {
  
  $q = db_fetch_object(db_query("SELECT * FROM {uc_products} WHERE model = '%s'", $model));
  
  return $q;
}


function xml_import_catalog($arg=NULL){
  
  $response = xml_import_get_xml_data(XML_IMPORT_LINK); // call the xml data
  _xml_step_two_categories($response,TRUE);
  
}


// start the chain here:

function _xml_step_one_images($arg=NULL,$independent=FALSE){
  $response = xml_import_get_xml_data(XML_IMPORT_LINK); // call the xml data
  
  foreach($response['product'] as $id => $val){
    $product_code = $val[id].".".$val[color][id]; // set this to find ids for photos
    
    for($x = 1; $x < 5; $x++){
	    $image_code = $product_code.".0".$x; 
	    echo $image_code."<br>";
	    $img_path = import_image_move($image_code);
	    
	    if($img_path){
	      echo "the image path: ".$img_path."<br>";
	      $response['product'][$id]['new_images'][] = $img_path;
	      drupal_add_existing_file($img_path);
      }
	   
	  }
    
  }
  
  //_xml_step_two_categories($response); // more onto the next step
}

function _xml_step_two_categories($response,$independent=FALSE){
  
  $catList = array();


	$countParent = 0;
	$countChild = 0;
	
	foreach($response['product'] as $val){

		foreach($val as $key => $v){

			if($key == "categoria"){
				$nk = (int)$v["id"];
				$catList[$nk] = $v["name"];
			}

				$countChild++;
		}
		$countParent++;

	}
	
	
	foreach($catList as $k => $v){
		
		$term_parent = 3; // 3 = standard / 4 = outlet
		
		$result = db_fetch_object(db_query("SELECT * FROM {xml_import_temp_cats} WHERE cid = '%d'",$k));
		
		$hexResult = db_fetch_object(db_query("SELECT * FROM {stock_category_colors} WHERE used_by_tid = '0' ORDER BY RAND() LIMIT 1"));
	
		
		if($result->tid){
		  //found a match, now update it clean up stupid characters and periods and stuff.
		  $v = removePeriodDivider($v);
		  db_query("UPDATE {term_data} SET name = '%s' WHERE tid = '%d'",$v,$result->tid);
		  
		  // if cat doesnt have a color give it one
		  $resultImage = db_fetch_object(db_query("SELECT * FROM {uc_catalog_images} WHERE tid = '%d'",$result->tid));
		    if(!$resultImage->hexcolor){
	    	  db_query("UPDATE {stock_category_colors} SET used_by_tid = '%d' WHERE scid = '%d'",$result->tid,$hexResult->scid);
    		  db_query("UPDATE {uc_catalog_images} SET hexcolor = '%s' WHERE tid = '%d'",$hexResult->hex,$result->tid);
  		  }
		  
		}else{
		
		
		
		  if(strstr($v,"OUTLET")){
		    $term_parent = 4; // check if category is an outlet. if so change the term parent
		    $v = removePeriodDivider($v);
		  }
		
    
	
	      	db_query("INSERT INTO {term_data} (vid, name, weight, description) VALUES (%d, '%s', '%d','%s')", 1, $v, 0,"autoImported");
      		$updateid = db_result(db_query("SELECT LAST_INSERT_ID()"));
		
      		db_query("INSERT INTO {term_hierarchy} (tid, parent) VALUES (%d, '%d')", $updateid, $term_parent); //3 is the standard category
		
      		db_query("INSERT INTO {xml_import_temp_cats} (tid, cid) VALUES (%d, '%d')", $updateid, $k); //add a temp table to hold references for product import
		
		
      		// we are faking an image on the category to allow addition of color
      		db_query("INSERT INTO {uc_catalog_images} (fid,tid, filename,filepath,filemime,filesize,hexcolor) 
      		        VALUES (%d, '%d', '%s', '%s', '%s', '%d', '%s')", '1553',$updateid,'image-missing.png','sites/default/files/image-missing.png','image/png','65969',$hexResult->hex); 
		
      		// this adds an id to the stock color to not allow it to be chosen again
      		db_query("UPDATE {stock_category_colors} SET used_by_tid = '%d' WHERE scid = '%d'",$updateid,$hexResult->scid);
	
	    }
		
		echo $v." | ".$result->tid." : ".$result->cid;
		echo "<br>";
		
	}

  if(!$independent){
    _xml_step_three_products($response);
  } 
  
}


function _xml_step_three_products($response,$independent=FALSE){
  
	$product_list = array();
	
	foreach($response['product'] as $id => $val){
		$product_list[$val[id]]["versions"][] = $val;
		if(count($response['product'][$id]['new_images']) > 0){
		  foreach($response['product'][$id]['new_images'] as $key => $imgs){
  		  $product_list[$val[id]]["photos"][] = $response['product'][$id]['new_images'][$key];
  		}
  	}
	}
	
	
	
	foreach($product_list as $id => $val){
		// we need to use the first product as a default
		$product_code = $val["versions"][0][id];
		$is_new = true;
				
		  $p = xml_import_product_load($product_code);

      if($p){ // if the product exists load the node and modify it.
        $node = node_load($p->vid);
        
        $existing = element_children($node->taxonomy);
        print "product vid: ".$p->vid." <br>";
        db_query("DELETE FROM {content_field_image_cache} WHERE vid = '%d'", $p->vid); // get rid of old image references
        
        $is_new = false;
        $output .= "loaded existig <br>";
      }else{
        $node = new StdClass();
        $output .= "creating new <br>";
        $is_new = true;
        $existing = array(); //create it to push other items in
      }
		
		$reformatted_price = str_replace(",",".",$val["versions"][0][listino]);
		$price = number_format($reformatted_price, 2, '.', '');
      
		
		$node->type = 'product';
		$node->title = check_plain($val["versions"][0][name]);
		$node->language = "it";
		$node->uid = 1;
	  $node->status = 1;
	  $node->active = 1;
		$node->body = check_plain($val["versions"][0][description]);
		$node->teaser = check_plain($val["versions"][0][description]);
		
		$node->field_product_code[0]['value'] = check_plain($val["versions"][0][id]);
		$node->field_imballo[0]['value'] = $val["versions"][0][imballo];
	
	// these should also set taxonomy records to show in catalog listings
		$node->field_novita[0]['value'] = ($val["versions"][0][novita] == "S") ? 1 : 0;
		$node->field_offerta[0]['value'] = ($val["versions"][0][offerta] == "S") ? 1 : 0;
		$node->field_esclusiva[0]['value'] = ($val["versions"][0][esclusiva] == "S") ? 1 : 0;
		
		$result = db_fetch_object(db_query("SELECT * FROM {xml_import_temp_cats} WHERE cid = '%d'",$val["versions"][0][categoria][id]));
		
		if(!in_array($result->tid,$existing)){
      $existing[] = $result->tid; // see if the id in the xml file is the same and load it if not.
    }
		
		if($val["versions"][0][novita] == 'S'){
      if(!in_array('7',$existing)){
        $existing[] = '7'; // if its not already in the array add it
      }
    }else{
      // it shouldnt be selected so take it out of the array
      foreach($existing as $key => $item){
        if($item == '7'){
          unset($existing[$key]);
        }
      }
    }
    
    if($val["versions"][0][offerta] == 'S'){
      if(!in_array('29',$existing)){
        $existing[] = '29'; // if its not already in the array add it
      }
    }else{
      // it shouldnt be selected so take it out of the array
      foreach($existing as $key => $item){
        if($item == '29'){
          unset($existing[$key]);
        }
      }
    }
    
    $node->taxonomy = array('1' => $existing); // this assigns all of our taxonomy to the vocab 1 which is our catalog
		
		unset($node->field_image_cache); // get rid of the deleted images from the array
  	
		if(count($val["photos"]) > 0){
	  	foreach($val["photos"] as $img_id => $img_path){
  		  $node->field_image_cache[] = drupal_add_existing_file($img_path);
  		}
  	}
		// WE NEED TO CHECK FOR THE EXISTING IMAGES AND COMPARE.

 
		
		$node->sell_price = $price;
		$node->list_price = $price;
		$node->cost = $price;
		$node->model = $product_code;
		$node->list_in_catalog = 0;

  	node_save($node);
  	
  	$product_list[$id]["vid"] = $node->vid;
  	
  	// get correpsonding color id from our color table
  	$color_table = db_fetch_array(db_query("SELECT * FROM {color_options_hex} WHERE product_color_code = %d", $val["versions"][0][color][id]));
  	
  	$attr = new StdClass();
    $attr->nid = $node->vid;
    $attr->aid = 4; // this is out color attribute // attention because it could change
    $attr->label = '<none>';
    $attr->default_option = $color_table['oid'];
    $attr->required = 0;
    $attr->ordering = 0;
    $attr->display = 1;

    //print 'Calling uc_attributes_form';
    if($is_new){
      drupal_write_record('uc_product_attributes', $attr);
      echo 'attrib parent is: '.$node->vid." and i am new";
    }else{
      drupal_write_record('uc_product_attributes', $attr,array('nid','aid'));
    }
		
		//db_query("INSERT INTO {uc_product_stock} (sku, nid, active, stock) VALUES ('%s', %d, %d, %d)", $node->model,$node->vid, true, $val[disponibile]);

		
		// lets add the attributes

  	  foreach($val["versions"] as $key => $option){
  	     // next loop through each model and add option, version and stock data.
  	     
  	    // get correpsonding color id from our color table
      	$version_color_table = db_fetch_array(db_query("SELECT * FROM {color_options_hex} WHERE product_color_code = %d", $option['color']['id']));
      	
      	echo "<pre>";
      	print_r($version_color_table);
      	echo "</pre>";
        
        // check if the option already exists by the option id. this should be the real color id not the lotus id.
        $option_lookup = db_fetch_object(db_query("SELECT * FROM {uc_product_options} WHERE oid = %d AND nid = %d", $version_color_table['oid'], $node->vid));
    	 
    	  $opts = new StdClass();
        $opts->nid = $node->vid;
        $opts->oid = $version_color_table['oid']; // this is out color attribute // attention because it could change
        $opts->cost = 0;
        $opts->price = 0;
        $opts->weight = 0;
        $opts->ordering = 0;

        //print 'Calling uc_attributes_form';
        if(!$option_lookup){
          drupal_write_record('uc_product_options', $opts);
        }else{
          drupal_write_record('uc_product_options', $opts, array('nid','oid'));
        }
        
        // check if the option already exists by the sku
        $sku_lookup = db_fetch_object(db_query("SELECT * FROM {uc_product_adjustments} WHERE model = '%s'", $option['id'].".".$option['color']['id']));
        
        $adjusts = new StdClass();
        $adjusts->nid = $node->vid;
        $adjusts->combination = serialize(array('4' => $version_color_table['oid'])); //this bind our color adjustment with model numbers and attributes
        $adjusts->model = $option['id'].".".$option['color']['id'];
        
        
        echo "<pre>";
      	print_r($sku_lookup);
      	echo "</pre>";

        //print 'Calling uc_attributes_form';
        if(!$sku_lookup){
          drupal_write_record('uc_product_adjustments', $adjusts);
          echo 'my id is: '.$node->vid." and i am new <br/>";
        }else{
          drupal_write_record('uc_product_adjustments', $adjusts, array('nid','model'));
          echo 'my id is: '.$node->vid." i am totally being updated <br/>";
        }
        
        $stock_lookup = db_fetch_object(db_query("SELECT * FROM {uc_product_stock} WHERE sku = '%s'", $option['id'].".".$option['color']['id']));
        
        $stock = new StdClass();
        $stock->nid = $node->vid;
        $stock->sku = $option['id'].".".$option['color']['id']; // this is out color attribute // attention because it could change
        $stock->active = 1;
        $stock->stock = $option['disponibile'];
        $stock->threshold = 0;

        //print 'Calling uc_attributes_form';
        if(!$stock_lookup){
         drupal_write_record('uc_product_stock', $stock);
         echo 'stock: '.$node->vid." and i am new";
        }else{
         drupal_write_record('uc_product_stock', $stock, 'sku');
         echo 'stock: '.$node->vid." i am totally being updated";
        }
        
        
        $version_lookup = db_fetch_object(db_query("SELECT * FROM {product_versions} WHERE sku = '%s'", $option['id'].".".$option['color']['id']));
        
        $version_data = new StdClass();
        $version_data->nid = $node->vid;
        $version_data->sku = $option['id'].".".$option['color']['id'];
        $version_data->imballo = $option['imballo'];
        $version_data->dimensions = check_plain($option['misure']);
        $version_data->arrivo_1 = $option['arrivo_1'];
        $version_data->data_arrivo_1 = check_plain($option['data_arrivo_1']);
        $version_data->arrivo_2 = $option['arrivo_2'];
        $version_data->data_arrivo_2 = check_plain($option['data_arrivo_2']);
        $version_data->disponibile_descr = check_plain($option['disponibile_descr']);
        $version_data->novita = ($option['novita'] == "S") ? 1 : 0;
        $version_data->offerta = ($option['offerta'] == "S") ? 1 : 0;
        $version_data->esclusiva = ($option['esclusiva'] == "S") ? 1 : 0;
        $version_data->published = 1;

        //print 'Calling uc_attributes_form';
        if(!$version_lookup){
          drupal_write_record('product_versions', $version_data);
          echo 'version: '.$node->vid." and i am new";
        }else{
          drupal_write_record('product_versions', $version_data, 'sku');
         echo 'version is: '.$node->vid." i am totally being updated";
        }
        
        
        
        
      }
	}
	
	$response['product_heirarchy'] = $product_list;
	
  
}

function _xml_update_stock($response){
  
	
	$product_list = array();
	$price_array = array();
	
	foreach($response['product'] as $id => $val){
		$product_list[$val[id]]["versions"][] = $val;
		
		$reformatted_price_all = str_replace(",",".",$val[listino]);
		$price_item = number_format($reformatted_price_all, 2, '.', '');
    
    $product_list[$val[id]]["prices"][] = $price_item;
		
		if(count($response['product'][$id]['new_images']) > 0){
		  foreach($response['product'][$id]['new_images'] as $key => $imgs){
  		  $product_list[$val[id]]["photos"][] = $response['product'][$id]['new_images'][$key];
  		}
  	}
	}
	
	
	
	foreach($product_list as $id => $val){
		// we need to use the first product as a default
		$product_code = $val["versions"][0][id];
		$is_new = true;
				
		  $p = xml_import_product_load($product_code);

      if($p){ // if the product exists load the node and modify it.
        $node = node_load($p->vid);
        
        $existing = element_children($node->taxonomy);
        print "product vid: ".$p->vid." <br>";
        //db_query("DELETE FROM {content_field_image_cache} WHERE vid = '%d'", $p->vid); // get rid of old image references
        
        $is_new = false;
        $output .= "loaded existig <br>";
      }else{
        $node = new StdClass();
        $output .= "creating new <br>";
        $is_new = true;
        $existing = array(); //create it to push other items in
      }
      
      //$deleteFotos = db_query("DELETE FROM {files} WHERE filename LIKE '%s' AND status = 1 ORDER BY timestamp DESC","%".$product_code."%");
		
		$reformatted_price = str_replace(",",".",$val["versions"][0][listino]);
		$price = number_format($reformatted_price, 2, '.', '');
  
		
		$node->type = 'product';
		$node->title = $val["versions"][0][name];
		$node->language = "it";
		$node->uid = 1;
	  $node->status = 1;
	  $node->active = 1;
		$node->body = htmlspecialchars($val["versions"][0][description]);
		$node->teaser = htmlspecialchars($val["versions"][0][description]);
		
		$node->field_product_code[0]['value'] = $val["versions"][0][id];
		$node->field_imballo[0]['value'] = $val["versions"][0][imballo];
	
	// these should also set taxonomy records to show in catalog listings
		$node->field_novita[0]['value'] = ($val["versions"][0][novita] == "S") ? 1 : 0;
		$node->field_offerta[0]['value'] = ($val["versions"][0][offerta] == "S") ? 1 : 0;
		$node->field_esclusiva[0]['value'] = ($val["versions"][0][esclusiva] == "S") ? 1 : 0;
		
		//$result = db_fetch_object(db_query("SELECT * FROM {xml_import_temp_cats} WHERE cid = '%d'",$val["versions"][0][categoria][id]));
		
		if(!in_array($result->tid,$existing)){
      $existing[] = $result->tid; // see if the id in the xml file is the same and load it if not.
    }
		
		if($val["versions"][0][novita] == 'S'){
      if(!in_array('7',$existing)){
        $existing[] = '7'; // if its not already in the array add it
      }
    }else{
      // it shouldnt be selected so take it out of the array
      foreach($existing as $key => $item){
        if($item == '7'){
          unset($existing[$key]);
        }
      }
    }
    
    if($val["versions"][0][offerta] == 'S'){
      if(!in_array('29',$existing)){
        $existing[] = '29'; // if its not already in the array add it
      }
    }else{
      // it shouldnt be selected so take it out of the array
      foreach($existing as $key => $item){
        if($item == '29'){
          unset($existing[$key]);
        }
      }
    }
    
    $node->taxonomy = array('1' => $existing); // this assigns all of our taxonomy to the vocab 1 which is our catalog
		
    
   // list the highest price for the product
   $price_high = max($val["prices"]);
		
		$node->sell_price = $price_high;
		$node->list_price = $price_high;
		$node->cost = $price;
		$node->model = $product_code;
		$node->list_in_catalog = 0;
		
		/*
		 $fnData = db_query("SELECT * FROM {files} WHERE filename LIKE '%s' AND status = 1 ORDER BY timestamp DESC","%".$product_code."%");
     $photos = array();
       while ( $obj = db_fetch_object ($fnData) ) {
        
       	 $photos[] = $obj;
       }
        
        sort($photos);
         echo "<pre>";
      	 print_r($val["prices"]);
      	 echo "</pre>";
      	 
       
       	if(count($photos) > 0){
     	  	foreach($photos as $img_id => $img_path){
       		  $node->field_image_cache[] = drupal_add_existing_file($img_path->filepath);
       		  print $img_path->filepath."<br/>";
       		}
       	}
    */

  	node_save($node);
  	
  	$product_list[$id]["vid"] = $node->vid;
  	
  	// get correpsonding color id from our color table
  	$color_table = db_fetch_array(db_query("SELECT * FROM {color_options_hex} WHERE product_color_code = %d", $val["versions"][0][color][id]));
  	
  	$attr = new StdClass();
    $attr->nid = $node->vid;
    $attr->aid = 4; // this is out color attribute // attention because it could change
    $attr->label = '<none>';
    $attr->default_option = $color_table['oid'];
    $attr->required = 0;
    $attr->ordering = 0;
    $attr->display = 1;

    //print 'Calling uc_attributes_form';
    if($is_new){
      drupal_write_record('uc_product_attributes', $attr);
      echo 'attrib parent is: '.$node->vid." and i am new";
    }else{
      drupal_write_record('uc_product_attributes', $attr,array('nid','aid'));
    }
		
		//db_query("INSERT INTO {uc_product_stock} (sku, nid, active, stock) VALUES ('%s', %d, %d, %d)", $node->model,$node->vid, true, $val[disponibile]);

		
		// lets add the attributes

  	  foreach($val["versions"] as $key => $option){
  	     // next loop through each model and add option, version and stock data.
  	    
         $reformatted_price_version = str_replace(",",".",$option[listino]);
     		 $price_version = number_format($reformatted_price_version, 2, '.', '');
     		 
     		 $differential_price = $price_version - $price_high; // always minus the ind prod price first. we know it can result at the highest of 0;
         
  	    // get correpsonding color id from our color table
      	$version_color_table = db_fetch_array(db_query("SELECT * FROM {color_options_hex} WHERE product_color_code = %d", $option['color']['id']));
      	
      	echo "<pre>";
      	print_r($price_high);
      	echo "</pre>";
        
        // check if the option already exists by the option id. this should be the real color id not the lotus id.
        $option_lookup = db_fetch_object(db_query("SELECT * FROM {uc_product_options} WHERE oid = %d AND nid = %d", $version_color_table['oid'], $node->vid));
    	 
    	  $opts = new StdClass();
        $opts->nid = $node->vid;
        $opts->oid = $version_color_table['oid']; // this is out color attribute // attention because it could change
        $opts->cost = $price_version;
        $opts->price = $differential_price;
        $opts->weight = 0;
        $opts->ordering = 0;

        //print 'Calling uc_attributes_form';
        if(!$option_lookup){
          drupal_write_record('uc_product_options', $opts);
        }else{
          drupal_write_record('uc_product_options', $opts, array('nid','oid'));
        }
        
        // check if the option already exists by the sku
        $sku_lookup = db_fetch_object(db_query("SELECT * FROM {uc_product_adjustments} WHERE model = '%s'", $option['id'].".".$option['color']['id']));
        
        $adjusts = new StdClass();
        $adjusts->nid = $node->vid;
        $adjusts->combination = serialize(array('4' => $version_color_table['oid'])); //this bind our color adjustment with model numbers and attributes
        $adjusts->model = $option['id'].".".$option['color']['id'];
        
        echo "FUCK FUCK UFCK: ".$option['id'].".".$option['color']['id']."<BR/>";
        echo "<pre>";
      	print_r($sku_lookup);
      	echo "</pre>";

        //print 'Calling uc_attributes_form';
        if(!$sku_lookup){
          drupal_write_record('uc_product_adjustments', $adjusts);
          echo 'my id is: '.$node->vid." and i am new <br/>";
        }else{
          drupal_write_record('uc_product_adjustments', $adjusts, array('nid','model'));
          echo 'my id is: '.$node->vid." i am totally being updated <br/>";
        }
        
        $stock_lookup = db_fetch_object(db_query("SELECT * FROM {uc_product_stock} WHERE sku = '%s'", $option['id'].".".$option['color']['id']));
        
        $stock = new StdClass();
        $stock->nid = $node->vid;
        $stock->sku = $option['id'].".".$option['color']['id']; // this is out color attribute // attention because it could change
        $stock->active = 1;
        $stock->stock = $option['disponibile'];
        $stock->threshold = 0;

        //print 'Calling uc_attributes_form';
        if(!$stock_lookup){
         drupal_write_record('uc_product_stock', $stock);
         echo 'stock: '.$node->vid." and i am new <br/>";
        }else{
         drupal_write_record('uc_product_stock', $stock, 'sku');
         echo 'stock: '.$node->vid." i am totally being updated <br/>";
        }
        
        
        $version_lookup = db_fetch_object(db_query("SELECT * FROM {product_versions} WHERE sku = '%s'", $option['id'].".".$option['color']['id']));
        
        $version_data = new StdClass();
        $version_data->nid = $node->vid;
        $version_data->sku = $option['id'].".".$option['color']['id'];
        $version_data->imballo = $option['imballo'];
        $version_data->dimensions = $option['misure'];
        $version_data->arrivo_1 = $option['arrivo_1'];
        $version_data->data_arrivo_1 = htmlspecialchars($option['data_arrivo_1']);
        $version_data->arrivo_2 = $option['arrivo_2'];
        $version_data->data_arrivo_2 = htmlspecialchars($option['data_arrivo_2']);
        $version_data->disponibile_descr = htmlspecialchars($option['disponibile_descr']);
        $version_data->novita = ($option['novita'] == "S") ? 1 : 0;
        $version_data->offerta = ($option['offerta'] == "S") ? 1 : 0;
        $version_data->esclusiva = ($option['esclusiva'] == "S") ? 1 : 0;
        $version_data->published = 1;

        //print 'Calling uc_attributes_form';
        if(!$version_lookup){
          drupal_write_record('product_versions', $version_data);
          echo 'version: '.$node->vid." and i am new <br/>";
        }else{
          drupal_write_record('product_versions', $version_data, 'sku');
         echo 'version is: '.$node->vid." i am totally being updated <br/>";
        }
        
        
        
        
      }
	}
	
	$response['product_heirarchy'] = $product_list;
  
}



function remove_temp_cats(){
	db_query("DELETE FROM {xml_import_temp_cats} WHERE tid > %d", 0);
}

function xml_import_delete_all_products($name){
	
	//$result = db_query("SELECT * FROM {node} WHERE type = '%s'", "product");
	$result = db_query("SELECT * FROM {node} WHERE type = '%s' || type = '%s'", "product", "product_kit");
	$output = "";

    while ($p = db_fetch_object($result)) {
      //$output .= $p->nid;
		node_delete($p->nid);
    }
	
	db_query("DELETE FROM {uc_product_stock} WHERE active > %d", 0);
	db_query("DELETE FROM {product_versions} WHERE sku != '%s'", "");
	
	drupal_flush_all_caches();
	drupal_set_message('cache flushed.');
	
	$output .= "Success!";
	return $output;

}
  function xml_import_cron(){
    //xml_import_update_stock();
  }


  function xml_import_update_stock($arg=NULL){
    $response = xml_import_get_xml_data(XML_IMPORT_LINK); // call the xml data
    _xml_update_stock($response);
  }


  function removePeriodDivider($s){
    $n = explode(".",$s);
    return $n[0];
  }

 function buildCurlParamString() {
     $urlstring = '';

     foreach ($this->parameters as $key => $value) {
         $urlstring .= urlencode($key).'='.urlencode($value).'&';
     }

     if (trim($urlstring) != '') {
         $urlstring = preg_replace("/&$/", "", $urlstring);
         return ($urlstring);
     } else {
         return (-1);
     }
 }


 function pullXML($URL, $request, $parameters) {
       
       $simpleXML = simplexml_load_string(newFeed($URL));

		return $simpleXML;
   }

	function newFeed($URL){
		$session = curl_init($URL); 	               // Open the Curl session
		curl_setopt($session, CURLOPT_HEADER, false); 	       // Don't return HTTP headers
		curl_setopt($session, CURLOPT_RETURNTRANSFER, true);   // Do return the contents of the call
		$xml = curl_exec($session); 	                       // Make the call
	//	header("Content-Type: text/xml"); 	               // Set the content type appropriately
	//	echo $xml; 	      // Spit out the xml
		curl_close($session); // And close the session
		
		return $xml;
	}
	
	function convert_xml2array(&$result,$root,$rootname='root') {
		$n=count($root->children());
		if ($n>0) {
			if (!isset($result[$rootname]['@attributes'])) {
				$result[$rootname]['attributes']=array();
				foreach ($root->attributes() as $atr=>$value){
					$result[$rootname]['attributes'][$atr]=(string)$value;
				}           
			}
			foreach ($root->children() as $child) {
				$name=$child->getName();    
				$this->convert_xml2array($result[$rootname][],$child,$name);                         
			}
		} else {       
			$result[$rootname]= (array) $root;
			if (!isset($result[$rootname]['attributes'])) {
				$result[$rootname]['attributes']=array();
			}
		}
	}

	function get_array_fromXML($xml) {
		$result=array();   
		$doc=simplexml_load_string($xml);    
		convert_xml2array($result,$doc);    
		return $result['root'];   
	}
	
	function simpleXMLToArray($xml,
                    $flattenValues=true,
                    $flattenAttributes = true,
                    $flattenChildren=true,
                    $valueKey='@value',
                    $attributesKey='@attributes',
                    $childrenKey='@children'){

        $return = array();
        if(!($xml instanceof SimpleXMLElement)){return $return;}
        $name = $xml->getName();
        $_value = trim((string)$xml);
        if(strlen($_value)==0){$_value = null;};

        if($_value!==null){
            if(!$flattenValues){$return[$valueKey] = $_value;}
            else{$return = $_value;}
        }

        $children = array();
        $first = true;
        foreach($xml->children() as $elementName => $child){
            $value = simpleXMLToArray($child, $flattenValues, $flattenAttributes, $flattenChildren, $valueKey, $attributesKey, $childrenKey);
            if(isset($children[$elementName])){
                if($first){
                    $temp = $children[$elementName];
                    unset($children[$elementName]);
                    $children[$elementName][] = $temp;
                    $first=false;
                }
                $children[$elementName][] = $value;
            }
            else{
                $children[$elementName] = $value;
            }
        }
        if(count($children)>0){
            if(!$flattenChildren){$return[$childrenKey] = $children;}
            else{$return = array_merge($return,$children);}
        }

        $attributes = array();
        foreach($xml->attributes() as $name=>$value){
            $attributes[$name] = trim($value);
        }
        if(count($attributes)>0){
            if(!$flattenAttributes){$return[$attributesKey] = $attributes;}
            else{$return = array_merge($return, $attributes);}
        }
       
        return $return;
    }
?>