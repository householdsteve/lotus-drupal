<?php
function xml_import_menu(){
  $items = array();

  $items['import-xml-catalog'] = array(
    'title' => t('Import Xml'),
    'page callback' => 'xml_import_catalog',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

$items['import-xml-products'] = array(
    'title' => t('Import Xml products'),
    'page callback' => 'xml_import_products',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
$items['import-xml-test-vars'] = array(
    'title' => t('Test Xml products'),
    'page callback' => 'xml_import_test',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
$items['delete-all-products-test'] = array(
    'title' => t('Delete all products'),
    'page callback' => 'xml_import_delete_all_products',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
$items['import-xml-users'] = array(
    'title' => t('Import users with xml'),
    'page callback' => 'xml_import_import_users',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_uc_price_handler().
 */
function xml_import_uc_price_handler() {
  return array(
    'alter' => array(
      'title' => t('Discount price handler'),
      'description' => t('Adds discounts to product prices.'),
      'callback' => 'xml_import_price_handler_alter',
    ),
  );
}


function xml_import_import_users($name){
  
  $response = xml_import_get_xml_data("http://localhost/lotuspd.com_prep/xml/clients.xml");
 

	$output = "starting output <br/>";
	
	foreach($response['cliente'] as $val){
	  
	  $uq = db_fetch_object(db_query("SELECT uid, value FROM {profile_values} WHERE value = '%s'",$val["codice"]));

    if($uq){ // if the product exists load the node and modify it.
      $u = user_load($uq->uid);
      $output .= "loaded existig <br>";
      
    }else{
      
      $output .= "creating new <br>";
      $newUser = array(
        'name' => $val["ragione_sociale"],
        //'name' => encodeUrlParam($val["ragione_sociale"]),
        'pass' => $val["password"], // note: do not md5 the password
        'mail' => $val["e_mail"],
        'status' => 1,
        'language' => "it",
        'init' => $val["e_mail"]
      );           
      $uo = user_save(null, $newUser);
      $u = user_load($uo->uid);
      
      $roles = user_roles();
      $u->roles = array(array_search('consumer_level_1', $roles) => 5);
      
      $edit_cliente = array(
        'profile_codice'=> $val["codice"],
        'profile_name' => $val["ragione_sociale"]
        );
        
      xml_import_save_profile($edit_cliente, $u, 'cliente');
    }
	  
    $u->name = $val["ragione_sociale"];
    $u->pass = $val["password"];
  	$u->mail = $val["e_mail"];
  	$u->timezone = "7200";
  	
  	
  	 $edit = array(
      'profile_discount_1'=> $val["sconto_1"],
      'profile_discount_2'=> $val["sconto_2"],
      'profile_discount_3'=> $val["sconto_3"],
      );

      $ua = user_save((object) array('uid' => $u->uid), (array) $u);
      
      xml_import_save_profile($edit, $u, 'Discounts');
    

  }
  
  return $output;
 
}

function encodeUrlParam ( $string )
{
  $string = trim($string);
   
  if ( ctype_digit($string) )
  {
    return $string;
  }
  else
  {     
    // replace accented chars
    $accents = '/&([A-Za-z]{1,2})(grave|acute|circ|cedil|uml|lig);/';
    $string_encoded = htmlentities($string,ENT_NOQUOTES,'UTF-8');

    $string = preg_replace($accents,'$1',$string_encoded);
     
    // clean out the rest
    $replace = array('([\40])','([^a-zA-Z0-9-])','(-{2,})');
    $with = array('-','','-');
    $string = preg_replace($replace,$with,$string);
  }

  return strtolower($string);
}



function xml_import_save_profile($edit, $user, $category, $register = FALSE) {
  $result = _profile_get_fields($category, $register);
  while ($field = db_fetch_object($result)) {
    if (_profile_field_serialize($field->type)) {
       $edit[$field->name] = serialize($edit[$field->name]);
    }
    db_query("DELETE FROM {profile_values} WHERE fid = %d AND uid = %d", $field->fid, $user->uid);
    db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')", $field->fid, $user->uid, $edit[$field->name]);
    // Mark field as handled (prevents saving to user->data).
    $edit[$field->name] = NULL;
  }
}


function xml_import_test($name) {
  
  watchdog("xml_import","tesint module");
  /*
  if(isset($name) && $name == "first"){
    return "we're rolling the first upload";
  }else{
    return "just doing old updates";
  }*/
  $node = new StdClass();
	$node->type = 'product_kit';
	$node->title = "tetpgmtly";
	$node->taxonomy[4] = 14;
	$node->uid = 1;
  $node->status = 1;
  $node->active = 1;
	$node->body = "pgmtly";
	$node->teaser = "pgmtly";
	$node->language = "it";
  
  // each product
    $node->products = array(790,791,792);
    
  // to allow product to be old seperately -1 dont list 0 list but dont add seperate 1 list and add seperate
    $node->mutable = 1;
    
  node_save($node);
  
}



function import_image_move($filename){
  
  $fp = fopen (file_directory_path()."/products/imported/".$filename.".jpg", 'w');//This is the file where we save the information
  
   // REPLACE THIS CHECK WITH ONE THAT MAKES SURE THE IMAGE EXISTS BEFORE TRYING TO TRANSFER IT.
    $ch = curl_init('http://localhost/lotuspd.com_prep/t/'.$filename.".jpg"); //Here is the file we are downloading
    if (false === $ch)
        {
            return false;
        }
      curl_setopt($ch, CURLOPT_TIMEOUT, 50);
      curl_setopt($ch, CURLOPT_FILE, $fp);
      curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
      curl_exec($ch);
   
      curl_close($ch);
  
  fclose($fp);
  return file_directory_path()."/products/imported/".$filename.".jpg";
}

function drupal_add_existing_file($file_drupal_path,$uid=1,$status=FILE_STATUS_PERMANENT) {
  $file=(object)array(
    'filename' =>basename($file_drupal_path),
    'filepath' =>$file_drupal_path,
    'filemime' =>file_get_mimetype($file_drupal_path),
    'filesize' =>filesize($file_drupal_path),
    'uid'      =>$uid,
    'status'   =>$status,
    'timestamp'=>time()
  );

  drupal_write_record('files',$file);

  return field_file_load($file_drupal_path);
}


function xml_import_get_xml_data($collect_url){
  
  $URL = $collect_url;
	$request = 'getInventory';
	$parameters = array("param1" => "value1", "param2" => "value2");
	
	$response = simpleXMLToArray(pullXML($URL,$request,$parameters));
  
  return $response;
}

function xml_import_product_load($model) {
  
  $q = db_fetch_object(db_query("SELECT * FROM {uc_products} WHERE model = '%s'", $model));
  
  return $q;
}


function xml_import_products($name) {
	
	$response = xml_import_get_xml_data("http://localhost/lotuspd.com_prep/xml/test.xml");

	$countParent = 0;
	$countChild = 0;
	//echo "<pre>";
	//var_dump($response);
	//echo "</pre>";
	//die;
	$product_list = array();
	
	$output = " cooltwothree";
	
	foreach($response['product'] as $val){
		
		$output .= "name: ".$val[name]."<br>";
		$output .= "color: ".$val[color][id]."<br>";
		$output .= "misure: ".$val[misure]."<br>";
		$output .= "imballo: ".$val[imballo]."<br>";
		
		// here we need to check to see if a node exists with the current product name. if it exists lets just update the
		// existing node. otherwise, lets create a new node. we'll also check the published node to see if we should delete it.
		// for images we need a conditional that checks first if this is the first install, if so use a different image directory
		// to download and transfer the images. otherwise use the update images directory. when updating images send the cURL call
		// and if the file name is not present do not update the image file.
		
		      // - <pubblica><![CDATA[S]]></pubblica>
		      
		// ----- ASK ABOUT HAT COLORS. WHERE ONE ITEM HAS MULTIPLE COLORS. OTHERIWSE EACH COLOR OF THE PRODUCT HAS ITS OWN PAGE?
		
		// -- need to add the CCK fields for:
		      // - <arrivo_1><![CDATA[0,00]]></arrivo_1>  -- int
          // - <data_arrivo_1><![CDATA[00/00/0000]]></data_arrivo_1> -- date
          // - <arrivo_2><![CDATA[0,00]]></arrivo_2>  -- int
          // - <data_arrivo_2><![CDATA[00/00/0000]]></data_arrivo_2> -- date
          // - <disponibile_descr><![CDATA[Maggiore di 1000]]></disponibile_descr> -- text
          // - <novita><![CDATA[]]></novita>  !!!!! -- this field should also set a taxonmy category to show on the novita page
          // - <offerta><![CDATA[]]></offerta>
          // - <esclusiva><![CDATA[]]></esclusiva>
          
    // -- need to add the attributes fields. First we should loop through the xml with the categories and insert and update
    // the attribute options, potentially using a temp table like with categories. then match up the attributes with the product
    // node when it is inserted/updated.
          // - <color id="51" name="ARGENTO/SILVER"/>
                // - IMAGES WILL BE ADDED BY COMBINING THE PRODUCT CODE AND THE COLOR ID.
                // - DEFAULT PHOTO COULD BE DETERMINED BY PUTTING ITS NAME IN THE FOTO NODE OF THE XML
	
		
		$product_code = $val[id].".".$val[color][id];
		
		  $p = xml_import_product_load($product_code);

      if($p){ // if the product exists load the node and modify it.
        $node = node_load($p->vid);
        $output .= "loaded existig <br>";
      }else{
        $node = new StdClass();
        $output .= "creating new <br>";
      }
		
		  $price = number_format($val[listino], 2, '.', '');
      $result = db_fetch_object(db_query("SELECT * FROM {xml_import_temp_cats} WHERE cid = '%d'",$val[categoria][id]));
		
		$node->type = 'product';
		$node->title = $val[name];
		$node->taxonomy[3] = $result->tid;
		$node->language = "it";
		$node->uid = 1;
	  $node->status = 1;
	  $node->active = 1;
		$node->body = $val[description];
		$node->teaser = $val[description];
		$node->field_dimensions[0]['value'] = $val[misure];
		$node->field_imballo[0]['value'] = $val[imballo];
		$node->field_arrivo_1[0]['value'] = number_format($val[arrivo_1],0);
		$node->field_data_arrivo_1[0]['value'] = $val[data_arrivo_1];
		$node->field_arrivo_2[0]['value'] = number_format($val[arrivo_2],0);
		$node->field_data_arrivo_2[0]['value'] = $val[data_arrivo_2];
		$node->field_disponibile_descr[0]['value'] = $val[disponibile_descr];
		$node->field_novita[0]['value'] = $val[novita];
		$node->field_offerta[0]['value'] = $val[offerta];
		$node->field_esclusiva[0]['value'] = $val[esclusiva];
		
	  $img_path = import_image_move($product_code);
	  if($img_path){
      $node->field_image_cache = array();
      $node->field_image_cache[] = drupal_add_existing_file($img_path);
    }
 
		
		$node->sell_price = $price;
		$node->list_price = $price;
		$node->cost = $price;
		$node->model = $product_code;
		$node->list_in_catalog = 0;

  	node_save($node);
		
		$product_list[$val[id]]["models"][] = $product_code;
		$product_list[$val[id]]["vids"][] = $node->vid;
		
		db_query("INSERT INTO {uc_product_stock} (sku, nid, active, stock) VALUES ('%s', %d, %d, %d)", $node->model,$node->vid, true, $val[disponibile]);

		$countParent++;
		
		

	}
	
	
	// lets add product kits now
	
	foreach($product_list as $key => $kit){
	    
	    $default_product = $product_list[$key]["vids"][0];
	    $combined_ids = join(" / ",$product_list[$key]["models"]);
	    echo $default_product. "  ";
	    echo $combined_ids."  ";
	    
	    echo "count: ".count($product_list[$key]["models"]);
	    
	    $pk = xml_import_product_load($combined_ids);

      if($pk && count($product_list[$key]["models"]) > 1){
          $product_kit = node_load($pk->vid);
          echo "laoded <br/>";
        }elseif(count($product_list[$key]["models"]) > 1){
          $product_kit = new StdClass();
          $product_kit->type = "product_kit";
          $product_kit->list_in_catalog = 1;
          echo "new kit <br/>";
      }else{
          
          echo "not a kit <br/>";
          $np = node_load($default_product);
          $np->list_in_catalog = 1;
          node_save($np);
        	unset($np);
          
          unset($product_kit);
      }
	    
	    if(isset($product_kit->type) && $product_kit->type == "product_kit"){
	        echo "im a kit <br/>";
	        // load the first node and put it's details in the kit !!! maybe consider a default selection?
	        $product_kit_first_item = node_load($default_product);
         	$product_kit->title = $product_kit_first_item->title;
         	$product_kit->taxonomy = $product_kit_first_item->taxonomy;
         	$product_kit->uid = 1;
          $product_kit->status = 1;
          $product_kit->active = 1;
         	$product_kit->body = $product_kit_first_item->body;
         	$product_kit->teaser = $product_kit_first_item->teaser;
         	$product_kit->language = "it";
        
           // each product
             $product_kit->products = $product_list[$key]["vids"];

           // to allow product to be old seperately -1 dont list 0 list but dont add seperate 1 list and add seperate
             $product_kit->mutable = 1;

           node_save($product_kit);
        }
	     
	}
	
	echo "<pre>";
	var_dump($product_list);
	echo "</pre>";
	die();
	
	
	$output .= "success!";
	return $output;
}





function xml_import_catalog($name) {
	//$URL = 'http://pofd.com/projects/lotus/xml/test.xml';
	$response = xml_import_get_xml_data("http://localhost/lotuspd.com_prep/xml/test.xml");
	
	$catList = array();


	$countParent = 0;
	$countChild = 0;
	
	foreach($response['product'] as $val){

		foreach($val as $key => $v){

			if($key == "categoria"){
				$nk = (int)$v["id"];
				$catList[$nk] = $v["name"];
			}

				$countChild++;
		}
		$countParent++;

	}
	
	
	$output = " ";
	
	foreach($catList as $k => $v){
		
		db_query("INSERT INTO {term_data} (vid, name, weight, description) VALUES (%d, '%s', '%d','%s')", 1, $v, 0,"autoImported");
		$updateid = db_result(db_query("SELECT LAST_INSERT_ID()"));
		
		db_query("INSERT INTO {term_hierarchy} (tid, parent) VALUES (%d, '%d')", $updateid, 3); //3 is the standard category
		
		db_query("INSERT INTO {xml_import_temp_cats} (tid, cid) VALUES (%d, '%d')", $updateid, $k); //add a temp table to hold references for product import
		
		$output .= $v;
		$output .= "<br>";
		
	}
	$output .= "success!";
	return $output;
}

function remove_temp_cats(){
	db_query("DELETE FROM {xml_import_temp_cats} WHERE tid > %d", 0);
}

function xml_import_delete_all_products($name){
	
	$result = db_query("SELECT * FROM {node} WHERE type = '%s'", "product");
	//$result = db_query("SELECT * FROM {node} WHERE type = '%s' || type = '%s'", "product", "product_kit");
	$output = "";

    while ($p = db_fetch_object($result)) {
      //$output .= $p->nid;
		node_delete($p->nid);
    }
	
	db_query("DELETE FROM {uc_product_stock} WHERE active > %d", 0);
	
	drupal_flush_all_caches();
	drupal_set_message('cache flushed.');
	
	$output .= "Success!";
	return $output;

}


   function buildCurlParamString() {
       $urlstring = '';

       foreach ($this->parameters as $key => $value) {
           $urlstring .= urlencode($key).'='.urlencode($value).'&';
       }

       if (trim($urlstring) != '') {
           $urlstring = preg_replace("/&$/", "", $urlstring);
           return ($urlstring);
       } else {
           return (-1);
       }
   }


 function pullXML($URL, $request, $parameters) {
       
       $simpleXML = simplexml_load_string(newFeed($URL));

		return $simpleXML;
   }

	function newFeed($URL){
		$session = curl_init($URL); 	               // Open the Curl session
		curl_setopt($session, CURLOPT_HEADER, false); 	       // Don't return HTTP headers
		curl_setopt($session, CURLOPT_RETURNTRANSFER, true);   // Do return the contents of the call
		$xml = curl_exec($session); 	                       // Make the call
	//	header("Content-Type: text/xml"); 	               // Set the content type appropriately
	//	echo $xml; 	      // Spit out the xml
		curl_close($session); // And close the session
		
		return $xml;
	}
	
	function convert_xml2array(&$result,$root,$rootname='root') {
		$n=count($root->children());
		if ($n>0) {
			if (!isset($result[$rootname]['@attributes'])) {
				$result[$rootname]['attributes']=array();
				foreach ($root->attributes() as $atr=>$value){
					$result[$rootname]['attributes'][$atr]=(string)$value;
				}           
			}
			foreach ($root->children() as $child) {
				$name=$child->getName();    
				$this->convert_xml2array($result[$rootname][],$child,$name);                         
			}
		} else {       
			$result[$rootname]= (array) $root;
			if (!isset($result[$rootname]['attributes'])) {
				$result[$rootname]['attributes']=array();
			}
		}
	}

	function get_array_fromXML($xml) {
		$result=array();   
		$doc=simplexml_load_string($xml);    
		convert_xml2array($result,$doc);    
		return $result['root'];   
	}
	
	function simpleXMLToArray($xml,
                    $flattenValues=true,
                    $flattenAttributes = true,
                    $flattenChildren=true,
                    $valueKey='@value',
                    $attributesKey='@attributes',
                    $childrenKey='@children'){

        $return = array();
        if(!($xml instanceof SimpleXMLElement)){return $return;}
        $name = $xml->getName();
        $_value = trim((string)$xml);
        if(strlen($_value)==0){$_value = null;};

        if($_value!==null){
            if(!$flattenValues){$return[$valueKey] = $_value;}
            else{$return = $_value;}
        }

        $children = array();
        $first = true;
        foreach($xml->children() as $elementName => $child){
            $value = simpleXMLToArray($child, $flattenValues, $flattenAttributes, $flattenChildren, $valueKey, $attributesKey, $childrenKey);
            if(isset($children[$elementName])){
                if($first){
                    $temp = $children[$elementName];
                    unset($children[$elementName]);
                    $children[$elementName][] = $temp;
                    $first=false;
                }
                $children[$elementName][] = $value;
            }
            else{
                $children[$elementName] = $value;
            }
        }
        if(count($children)>0){
            if(!$flattenChildren){$return[$childrenKey] = $children;}
            else{$return = array_merge($return,$children);}
        }

        $attributes = array();
        foreach($xml->attributes() as $name=>$value){
            $attributes[$name] = trim($value);
        }
        if(count($attributes)>0){
            if(!$flattenAttributes){$return[$attributesKey] = $attributes;}
            else{$return = array_merge($return, $attributes);}
        }
       
        return $return;
    }

//---- overwrite some functions of the uc cart. add these to a new module ---//
/*
function xml_import_uc_catalog_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'taxonomy_form_term' && $form['vid']['#value'] == variable_get('uc_catalog_vid', 0)) {
    $form['#attributes'] = array("enctype" => "multipart/form-data");

    $form['identification']['name']['#weight'] = -1;
    $form['identification']['image']['#weight'] = 0;
    $form['identification']['image']['image'] = array('#type' => 'file',
      '#title' => t('Image'),
      '#weight' => 0,
    );
    $image = uc_catalog_image_load($form['tid']['#value']);
    $imagecache = module_exists('imagecache');
    if ($image) {
      if ($imagecache) {
        $image_display = theme('imagecache', 'uc_category', $image->filepath);
      }
      else {
        $image_display = theme('image', $image->filepath, t('Term image'));
      }
      $form['identification']['image']['remove'] = array('#type' => 'checkbox',
        '#title' => t('Remove category image: !image', array('!image' => $image_display)),
        '#weight' => 1,
      );
    }
    if (!$imagecache) {
      $form['identification']['image']['image']['#description'] = t('The image will not be resized. Consider installing <a href="@url">Image cache</a>.', array('@url' => url('http://drupal.org/project/imagecache')));
    }

    $form['identification']['description']['#description'] = t('A description of the term. Displayed to customers at the top of catalog pages.');
	
	$form['identification']['hexcolor']['hexcolor'] = array('#type' => 'text',
      '#title' => t('Hex Color'),
      '#weight' => 0,
    );
	$form['identification']['hexcolor']['#description'] = t('A color that will highlight the category aroudn the site.');

  }
}*/

//---- end of changes ---//

?>