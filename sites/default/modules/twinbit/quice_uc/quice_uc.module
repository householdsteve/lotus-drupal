<?php

/*
 * TODO:
 * - controllare che l'utente possa vedere i propri ordini
 * - controllare chosa fa la regola in_checkout
 * - una volta che il responsabile cambia lo stato in buyer,
 *   passare ad una form di conferma e disabilitare l'editing dello stato
 * - rendere modificabili dall'amministratore i permessi sugli stati (anche viceversa)
 * - salvare gli ordini come nodi
 *
 */
/**
 * Implementation of hook_menu().
 */
 /*
function quice_uc_menu() {
  global $user;
  $items = array();
 var_dump('sss');die;
  $items['admin/store/orders/%uc_order/edit'] = array(
    'title' => 'Edits',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_order_edit_form', 3),
    'access arguments' => array('pippo'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file path' => drupal_get_path('module', 'uc_order'),
    'file' => 'uc_order.admin.inc',
  );
 return $items;
}
*/
function quice_uc_menu_alter(&$items) {
   $items['admin/store/orders/%uc_order/edit']['access arguments'] = array(3);
   $items['admin/store/orders/%uc_order/edit']['access callback']  = 'quice_uc_user_can_edit';
}

/*
 * determine if user can edit depending on order status
 */
function quice_uc_user_can_edit ($order) {
    global $user;
    //var_dump($order->order_status);
    //var_dump($user->roles);
    /*
    var_dump(uc_order_actions($order));
    $available_statuses = uc_order_status_list();
    foreach ($available_statuses as $available_status) {
	$statuses[] = $available_status['id'];
    }
    */
    //$edit_statuses = quice_uc_map_role_edit_order_permission($user->roles);

    return (user_access('edit orders') && quice_uc_get_role_edit_order_permission ($user->roles, $order->order_status));
    
}

/*
 * determine if user can change status depending on order status
 */
function quice_uc_user_can_change_status ($order) {
    global $user;

    return (quice_uc_get_role_edit_order_permission ($user->roles, $order->order_status));

}

/*
 * check edit permission
 */
function quice_uc_get_role_edit_order_permission ($user_roles, $order_status) {

    $permissions = array(
	'buyer' => array ('in_checkout', 'buyer', 'processing', 'completed'),
	'responsabile' => array ('canceled', 'pending', 'evaluation', 'in_checkout'),
	'sysadm' => array ('canceled', 'pending', 'evaluation', 'in_checkout', 'buyer', 'processing', 'completed')
    );
    
    foreach ($user_roles as $user_role) {
	if ($permissions[$user_role] && in_array($order_status, $permissions[$user_role])) {
	    return true;
	}
    }
    return false;
}

/*
 * map edit permission
 */
function quice_uc_map_role_status_order_permission ($user_roles) {

    $permissions = array(
	'buyer' => array ('canceled', 'buyer', 'evaluation', 'processing', 'completed'),
	'responsabile' => array ('canceled', 'pending', 'evaluation', 'in_checkout', 'buyer'),
	'sysadm' => array ('canceled', 'pending', 'evaluation', 'in_checkout', 'buyer' ,'processing', 'completed')
    );

    $available_statuses = uc_order_status_list();
    foreach ($available_statuses as $available_status) {
	$all_statuses[$available_status['id']] = $available_status['title'];
    }
    /*
    var_dump($all_statuses);
    var_dump($statuses);
    var_dump($user_roles);
    */
    $statuses = array();
    foreach ($user_roles as $user_role) {
	//var_dump($permissions[$user_role]);
	if ($permissions[$user_role]) {
	   foreach ($permissions[$user_role] as $p) {
	       $statuses[$p] = $all_statuses[$p];
	   }
	}
    }
    return $statuses;
}


/**
 * Implementation of hook_order().
 */
function quice_uc_order($op, &$arg1, $arg2) {
  //var_dump($op);
  //var_dump($arg2);
  /*
  switch ($op) {
    case 'submit':
	var_dump('submit');
    break;
    case 'load':
	var_dump('load');
    break;
    case 'can_update':
	var_dump('can_update');
    break;
    case 'update':
	var_dump('update');
    break;

  }
  */
}

/**
 * Implementation of hook_form_alter().
 */
function quice_uc_form_alter(&$form, $form_state, $form_id) {
    global $user;
    
    if ($form_id == 'uc_order_view_update_form') {
	//var_dump('uc_order_view_update_form');
	//var_dump($form);
	$options = quice_uc_map_role_status_order_permission($user->roles);
	if (count($options) && quice_uc_get_role_edit_order_permission ($user->roles, $form['current_status']['#value'])) {
	    $form['controls']['status'] = array(
	    '#type' => 'select',
	    '#title' => t('Order status'),
	    '#default_value' => $form['current_status']['#value'],
	    '#options' => $options,
	    '#attributes' => array('style' => 'display: inline;'),
	    '#weight' => -10,
	    );
	    $form['controls']['notify']['#default_value'] = 1;
	    
	}
	else {
	    // e togliere l'order pane?
	    //unset($form['controls']['status']);
	    //unset($form['controls']['notify']);
	    unset($form['controls']);
	    unset($form['order_comment_field']);
	    unset($form['admin_comment_field']);
	    //$form['#submit'];
	    //var_dump($form);
	}
    }
}

function quice_uc_uc_order_view_update_form_submit($form, &$form_state) {
    
}

/*
function hook_order_pane() {
  $panes[] = array(
    'id' => 'payment',
    'callback' => 'uc_order_pane_payment',
    'title' => t('Payment'),
    'desc' => t('Specify and collect payment for an order.'),
    'class' => 'pos-left',
    'weight' => 4,
    'show' => array('view', 'edit', 'customer'),
  );
  return $panes;
}
*/


/**
* Implementation of hook_token_list().
*/
function quice_uc_token_list($type = 'all') {
    
  if ($type == 'requester') {
    $tokens['quice_uc'] = array(
      'requester_email' => t('Email of the user who issued the connection request.'),
    );
  }
  elseif ($type = 'relationship') {
    $tokens['quice_uc'] = array(
      'requestee_email' => t('Email of the user who approved the connnection request.'),
      'requester_email' => t('Email of the user who issued the connnection request.'),
    );
  }
  elseif ($type = 'order') {
    $tokens['quice_uc'] = array(
      'requestee_email' => t('Email of the user who approved the connnection request.'),
      'requester_email' => t('Email of the user who issued the connnection request.'),
    );
  }
  return $tokens;
}

/**
* Implementation of hook_token_values().
*/
function quice_uc_token_values($type, $data = NULL, $options = array()) {

  if ($type == 'requester') {
    $user = user_load(array('uid' => $data));
    //var_dump($user);die;
    $token_values = array(
      'requester_email' => $user->mail,
    );
  }
  elseif ($type == 'requestee') {
    $user = user_load(array('uid' => $data));
    //var_dump($user);die;
    $token_values = array(
      'requestee_email' =>  $user->mail,
    );
  }
  
  elseif ($type == 'relationship') {
    $requester = user_load(array('uid' => $data->requester_id));
    $requestee = user_load(array('uid' => $data));
    /*
    var_dump($requester);
    var_dump($requestee);die;
    */
    $token_values = array(
      'requestee_email' => $requestee->mail,
      'requester_email' => $requester->mail,
    );
  }
  elseif ($type == 'order') {
    //var_dump($data);
    $order = $data;
    $issuer_id = $order->uid;
    $issuer = user_load(array('uid' => $issuer_id));
    //var_dump($issuer);
    $issuer_relationships = user_relationships_load(array('requestee_id' => $issuer_id, 'rtid' => 1, 'approved' => TRUE));
    //$issuer_relationships = user_relationships_load(array('requestee_id' => $issuer_id, 'approved' => TRUE));
    //var_dump($issuer_relationships);
    if ($issuer_relationships) {
	foreach ($issuer_relationships as $issuer_relationship) {
	    $requester = user_load(array('uid' => $issuer_relationship->requester_id));
	    $email[] = $requester->mail;
	}
	//var_dump($requester);
	$token_values = array(
	'requestee_email' => $issuer->mail,
	'requester_email' => implode(', ' , $email),
	);
    }
    //var_dump($token_values);
    //die;
  }
  /*
  elseif ($type == 'user') {
    $requester = user_load(array('uid' => $issuer_relationships->requester_id));
    $requestee = user_load(array('uid' => $data));
    var_dump($data);
    //var_dump($requester);
    //var_dump($requestee);
    $relationships = user_relationships_load(array('requestee_id' => $data->uid, 'approved' => TRUE));
    var_dump($relationships);
    die;

    $token_values = array(
      'requestee_email' => $requestee->mail,
      'requester_email' => $requester->mail,
    );
  }
  */
  return isset($token_values) ? $token_values : NULL;
}

?>